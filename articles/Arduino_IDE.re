
= Arduino IDE開発手順
Arduino IDEでデジタルカメラアプリケーションを開発する手順について書きます。

今回のソースコードは次のGitHubリポジトリに置きました。

@<href>{https://github.com/grace2riku/spresense_camera_arduino/tree/master,Arduino IDE 版デジタルカメラアプリケーション GitHub リポジトリのリンク}

== プログラム概要
ArduinoのカメラサンプルプログラムをベースにしてSpresense SDK同様の動作に変更します。

== ベースにしたサンプルプログラム
Arduinoのカメラサンプルスケッチをベースにします。
カメラのサンプルスケッチの説明は次のリンクに書かれています。

 * @<href>{https://developer.sony.com/develop/spresense/docs/arduino_tutorials_ja.html#_tutorial_camera,3. Camera チュートリアル}
　こちらはカメラサンプルスケッチに必要なライブラリインストールやコード変更手順など動作手順を解説してます。

 * @<href>{https://developer.sony.com/develop/spresense/docs/arduino_developer_guide_ja.html#_%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AB%E3%82%88%E3%82%8B%E8%A7%A3%E8%AA%AC,.2.7. サンプルコードによる解説}
　こちらはカメラサンプルスケッチのコードを詳しく解説しています。

== アプリケーションの作成手順
Arduino版デジタルカメラアプリケーション作成手順について書きます。

@<href>{https://developer.sony.com/develop/spresense/docs/arduino_set_up_ja.html,Spresnse Arduino版の開発環境構築}は完了している前提で書きます。

=== カメラサンプルスケッチの環境構築
前述しましたがArduino版デジタルカメラアプリケーションはカメラのサンプルスケッチをベースに変更していきます。
そのためまずはカメラサンプルスケッチの環境構築をします。
具体的には@<hd>{ベースにしたサンプルプログラム}の【3. Camera チュートリアル】の手順を実行します。
LCD（ILI9341）の制御に必要なライブラリのインストール、LCD制御にサンプルスケッチの変更が必要なためです。

=== カメラサンプルスケッチの動作確認
前の@<hd>{カメラサンプルスケッチの環境構築}で開発環境ができました。
実際にビルド・書込みしカメラサンプルスケッチが正しく動作することを確認します。
カメラサンプルスケッチの動作は次のリンク4, 5に書かれているとおりです。

 * @<href>{https://developer.sony.com/develop/spresense/docs/arduino_tutorials_ja.html#_%E5%8B%95%E4%BD%9C%E6%89%8B%E9%A0%86_18,3.1.3. 動作手順}

LCD画像にプレビュー画像を表示し、100枚撮影しSDカードに保存します。
この動作が確認できたらArduino版デジタルカメラアプリケーションの変更をしていきます。

//comment{
OSのコンフィギュレーションがないことがSpresense SDKとの違いと書く。
//}

=== 実装
==== ファイル構造
ファイルの構造は次のようになっています。
各ファイルの説明は*印を参照してください。

 * camera_arduino
 ** camera_arduino.ino *1
 ** gpio.h *2
 ** gpio.ino *3

1. カメラメイン処理@<br>{}
　デジタルカメラアプリケーションのメイン機能の処理をおこないます。@<br>{}

2. GPIO.inoヘッダファイル@<br>{}
　GPIO.inoで外部公開する関数を定義しています。@<br>{}

3. 割り込み設定・割り込み処理@<br>{}
　APS学習ボードのタクトスイッチを使用するため割り込み設定、割り込み処理をしています。
デジタルカメラアプリケーションで追加した処理で変更内容は@<hd>{デジタルカメラアプリケーション要求仕様の実装}の
GPIO初期化、GPIO両エッジ割り込みに書いています。@<br>{}

==== カメラアプリケーションのメイン機能
//comment{
カメラサンプルスケッチからの変更点を書く。
//}

==== デジタルカメラアプリケーション要求仕様の実装
@<hd>{camera_overview|デジタルカメラの要求仕様}で書いた機能を実装します。

 1. LCDに画像をプレビュー表示し続ける → 【LCD画像プレビュー表示継続機能】とします。
 1. 任意のタイミングで画像を保存できること → 【任意タイミングの画像保存機能】とします。
 1. 任意のタイミングでカメラの使用を終了できること → 【カメラ終了機能】とします。

===== LCD画像プレビュー表示継続機能@<br>{}

===== 任意タイミングの画像保存機能@<br>{}

===== カメラ終了機能@<br>{}

===== GPIO初期化@<br>{}
//comment{
処理内容はSpresenseと同じ。
Arduinoの関数を使っていること・Spresnse SDKとピン番号が違う件について書く。
//}
APS学習ボードのタクトスイッチは次の機能割り当てにしました。

 * SW1はアプリケーションの終了に使用

 * SW2はシャッターに使用

SW1・SW2の押下状況を把握するために両エッジの割り込みを使うことにしました。
ここで割り込みエッジ設定・割り込みハンドラ登録、割り込みの有効化をしています。

===== GPIO両エッジ割り込み@<br>{}
//comment{
処理内容はSpresenseと同じ。
Arduinoの関数を使っていることを書く。
//}
APS学習ボードのタクトスイッチ（SW1、SW2）はプルアップされています。
GPIO初期化でスイッチ押下（立ち下がりエッジ）・リリース（立ち上がりエッジ）の両エッジで割り込み発生するよう設定しています。
SW1押下でアプリケーションの終了のフラグをセットします。SW2押下でシャッターのフラグをセットします。
また、SW1・SW2のレベルを読み込み、読み出したレベルをAPS学習ボードのLED（USER_LED1、USER_LED2）に書込みしています。
結果スイッチ押下でLEDが消灯し、スイッチリリースでLEDが点灯します。



=== ビルド


== 書込み


== GitHubソースコードをmakeする手順


== 動作確認
=== アプリケーションの動作確認
=== Arduino IDE固有のこと
//comment{
シリアルモニタの操作手順

//}